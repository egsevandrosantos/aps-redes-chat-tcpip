/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chattcpip.screens;

import chattcpip.classes.InformacoesCliente;
import chattcpip.classes.InformacoesServidor;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;

/**
 *
 * @author Evandro Santos
 */
public class LoginScreen extends javax.swing.JFrame {
    String ipLocal, ipPublico;
    
    /**
     * Creates new form Login
     */
    public LoginScreen() {
        initComponents();
        ipLocal = getIPLocal();
        ipPublico = getIPPublico();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldIpPublicoServidor = new javax.swing.JTextField();
        jTextFieldIpLocalCliente = new javax.swing.JTextField();
        jTextFieldNome = new javax.swing.JTextField();
        jCheckBoxSouServidor = new javax.swing.JCheckBox();
        jButtonEntrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldIpLocalServidor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldIpPublicoCliente = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat - Tela de login");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Login");

        jLabel2.setText("IP público do servidor:");

        jLabel3.setText("Nome no chat:");

        jLabel4.setText("IP local do cliente:");

        jTextFieldIpLocalCliente.setText(getIPLocal());

        jCheckBoxSouServidor.setText("Sou o servidor");
        jCheckBoxSouServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSouServidorActionPerformed(evt);
            }
        });

        jButtonEntrar.setText("Entrar");
        jButtonEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEntrarActionPerformed(evt);
            }
        });

        jLabel5.setText("IP local do servidor:");

        jLabel6.setText("IP público do cliente:");

        jTextFieldIpPublicoCliente.setText(getIPPublico());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldIpPublicoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxSouServidor))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldIpLocalCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextFieldIpLocalServidor)
                                        .addComponent(jTextFieldIpPublicoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                    .addComponent(jButtonEntrar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldIpPublicoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxSouServidor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldIpLocalServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldIpPublicoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldIpLocalCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonEntrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxSouServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSouServidorActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxSouServidor.isSelected()) {
            jTextFieldIpPublicoCliente.setText("");
            jTextFieldIpPublicoCliente.setEnabled(false);
            jTextFieldIpLocalCliente.setText("");
            jTextFieldIpLocalCliente.setEnabled(false);
            jTextFieldNome.setText("");
            jTextFieldNome.setEnabled(false);
            jTextFieldIpPublicoServidor.setText(ipPublico);
            jTextFieldIpLocalServidor.setText(ipLocal);
        } else {
            jTextFieldIpPublicoServidor.setText("");
            jTextFieldIpLocalServidor.setText("");
            jTextFieldIpPublicoCliente.setText(ipPublico);
            jTextFieldIpPublicoCliente.setEnabled(true);
            jTextFieldIpLocalCliente.setText(ipLocal);
            jTextFieldIpLocalCliente.setEnabled(true);
            jTextFieldNome.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxSouServidorActionPerformed

    private void jButtonEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEntrarActionPerformed
        // TODO add your handling code here:
        if (isValidLogin()) {
            if (jCheckBoxSouServidor.isSelected()) {
                InformacoesServidor infoServidor = InformacoesServidor.getInstance();
                infoServidor.setIpPublicoServidor(jTextFieldIpPublicoServidor.getText());
                infoServidor.setIpLocalServidor(jTextFieldIpLocalServidor.getText());
                ServidorScreen servidor = new ServidorScreen();
                this.dispose();
                servidor.setVisible(true);
            } else {
                InformacoesCliente infoCliente = new InformacoesCliente(0, jTextFieldIpPublicoCliente.getText(), jTextFieldIpLocalCliente.getText(), jTextFieldNome.getText());
                infoCliente.setIpPublicoServidor(jTextFieldIpPublicoServidor.getText());
                infoCliente.setIpLocalServidor(jTextFieldIpLocalServidor.getText());
                try {
                    byte[] ipLocalByteArr = InetAddress.getByName(jTextFieldIpLocalServidor.getText()).getAddress();
                    Socket socket = new Socket(InetAddress.getByAddress(jTextFieldIpPublicoServidor.getText(), ipLocalByteArr), infoCliente.getPortServidor());
                    ClienteScreen cliente = new ClienteScreen(infoCliente, socket);
                    this.dispose();
                    cliente.setVisible(true);
                } catch (IOException error) {
                    JOptionPane.showMessageDialog(null, "Servidor não encontrado, verifique se os dados estão corretos.", "Servidor não encontrado", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButtonEntrarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEntrar;
    private javax.swing.JCheckBox jCheckBoxSouServidor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextFieldIpLocalCliente;
    private javax.swing.JTextField jTextFieldIpLocalServidor;
    private javax.swing.JTextField jTextFieldIpPublicoCliente;
    private javax.swing.JTextField jTextFieldIpPublicoServidor;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables

    private String getIPLocal() {
        try {
            InetAddress iNetAddress = InetAddress.getLocalHost();
            return iNetAddress.getHostAddress();
        } catch (UnknownHostException error) {
            JOptionPane.showMessageDialog(null, error.getCause().toString() + " - " + error.getMessage(), "Erro ao recuperar IP Local", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }
    
    private String getIPPublico() {
        String[] urls = { "http://checkip.amazonaws.com/", "https://myexternalip.com/raw", "https://ipecho.net/plain" };
        String ip = null;
        for (int i = 0, l = urls.length; ip == null && i < l; i++) {
            try {
                URL url = new URL(urls[i]);
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                ip = in.readLine();
            } catch (MalformedURLException error) {
                JOptionPane.showMessageDialog(null, error.getCause().toString() + " - " + error.getMessage(), "Erro ao recuperar IP Público", JOptionPane.ERROR_MESSAGE);
            } catch (IOException error) {
                JOptionPane.showMessageDialog(null, error.getCause().toString() + " - " + error.getMessage(), "Erro ao recuperar IP Público", JOptionPane.ERROR_MESSAGE);
            }
        }
        return ip;
    }
    
    private boolean isValidLogin() {
        StringBuilder builder = new StringBuilder();
        if (jTextFieldIpPublicoServidor.getText() == null || jTextFieldIpPublicoServidor.getText().trim().isEmpty())
            builder.append("IP público do servidor não pode ser vazio.\n");
        if (jTextFieldIpLocalServidor.getText() == null || jTextFieldIpLocalServidor.getText().trim().isEmpty())
            builder.append("IP local do servidor não pode ser vazio.\n");
        if (!jCheckBoxSouServidor.isSelected() && (jTextFieldIpPublicoCliente.getText() == null || jTextFieldIpPublicoCliente.getText().trim().isEmpty()))
            builder.append("IP público do cliente não pode ser vazio.\n");
        if (!jCheckBoxSouServidor.isSelected() && (jTextFieldIpLocalCliente.getText() == null || jTextFieldIpLocalCliente.getText().trim().isEmpty()))
            builder.append("IP local do cliente não pode ser vazio.\n");
        if (!jCheckBoxSouServidor.isSelected() && (jTextFieldNome.getText() == null || jTextFieldNome.getText().trim().isEmpty()))
            builder.append("Nome no chat não pode ser vazio.\n");
        
        if (!builder.toString().isEmpty())
            JOptionPane.showMessageDialog(null, builder.toString(), "Existem erros de validação.", JOptionPane.ERROR_MESSAGE);
        
        return builder.toString().isEmpty();
    }
}
